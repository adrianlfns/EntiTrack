@page "/ner_genai_inference"

@* 
 Component to perform a single NER inference with google genAI
*@

@inject StateContainer StateContainer
@inject APIManager APIManager

<PageTitle>NER GenAI (Single)</PageTitle>

<h1 class="bd-title mb-1" id="content">Perform Named Entity Recognition (NER) from GenAI</h1>

<GenAIInstructions></GenAIInstructions>


<ul class="nav nav-tabs" id="myTab" role="tablist">
  <li class="nav-item" role="presentation">
    <button class="nav-link @(activeIndex ==0 ? "active":"")" id="home-tab" @onclick="()=> SetActiveTab(0)"   type="button" role="tab" aria-controls="home" aria-selected="true">Parameters</button>
  </li>
  <li class="nav-item" role="presentation">
    <button class="nav-link @(activeIndex ==1 ? "active":"")" id="profile-tab" @onclick="()=> SetActiveTab(1)"  type="button" role="tab" aria-controls="profile" aria-selected="false">Results</button>
  </li> 
</ul>
<div class="tab-content" id="myTabContent">
  <div class="tab-pane fade @(activeIndex==0 ? "show active" : "") p-2" id="home" role="tabpanel">        

        @if(IsLoading)
        {
        <LoadingComponent />
        }
        
        <div class="row"> 
          <div class="col-lg-12">
              <div class="card mt-1">             
                <div class="card-body">
                    <h5 class="card-title">Model</h5> 
                    <div class="row mt-2">
                        <div class="col-lg-6 col-md-6">
                            <label for="inputPassword5">Google AI Studio API Key <span style="color:red;">(Required)</span></label>
                            <div class="input-group input-group-sm"> 
                                <input type="password" id="inputPassword5" @bind="GoogleGenAIAPIKey" class="form-control form-control-sm" aria-describedby="passwordHelpBlock">
                                <div class="input-group-append">
                                  <button class="btn btn-primary btn-sm" disabled="@IsLoading" type="button" @onclick="ValidateModels"><i class="bi bi-check-circle"></i> Validate</button>
                                </div>
                            </div>
                            @if(!string.IsNullOrWhiteSpace(KeyValidationMessage))
                            {
                                <div style="color:red;">@KeyValidationMessage</div>
                            }        
                            <small id="passwordHelpBlock" class="form-text  text-muted">
                                Get your API key <a target="_blank" href="https://aistudio.google.com/apikey"> here</a> 
                            </small>    
                        </div>

                        <div class="col-lg-6 col-md-6">
                            <label for="inputPassword5">AI Model <span style="color:red;">(Required)</span></label>
                            <select class="form-control form-control-sm" id="exampleFormControlSelect1" @bind="SelectedModelKey">
                                <option value="volvo" disabled>Select a model</option>
                                @foreach(var model in ModelDataCol)
                                {
                                    <option value=@model.name>@model.display_name</option>
                                }           
                            </select>
                            @if(!string.IsNullOrWhiteSpace(AIModelValidationMessage))
                            {
                                <div style="color:red;">@AIModelValidationMessage</div>
                            } 
                            <small id="passwordHelpBlock" class="form-text  text-muted">
                                View model cards <a target="_blank" href="https://modelcards.withgoogle.com/model-cards"> here</a> 
                            </small>    
                        </div> 
                    </div>
                </div>
            </div>
          </div>          
        </div>

        <div class="row mt-1">           
          <div class="col-md-6">
            <div class="card">             
              <div class="card-body">
                  <h5 class="card-title">Text to be analyzed</h5>
                  <textarea class="form-control form-control-sm" rows="10" @bind="TextToBeAnalyzed">

                  </textarea>
                  @if(!string.IsNullOrWhiteSpace(TextToBeAnalyzedValidationMessage))
                  {
                    <div style="color:red;">@TextToBeAnalyzedValidationMessage</div>
                  }                   
              </div>
            </div>
          </div>  
          <div class="col-md-6">
            <div class="card">             
              <div class="card-body">
                  <h5 class="card-title">Fields</h5>

                  @if(FieldToExtractCol is not null)
                  {
                    @foreach(FieldToExtract oFieldToExtract in FieldToExtractCol)
                    {
                      <Field FieldProp="@oFieldToExtract" OnDelete="OnFieldDelete" OnTextEntered="OnFieldTextEntered"></Field>
                    }
                  }               
                  <button class="btn btn-primary btn-sm mt-1" @onclick="AddField"> <i class="bi bi-plus-circle"></i> Add field</button>
                  @if(!string.IsNullOrWhiteSpace(FieldsValidationMessage))
                  {
                    <div style="color:red;">@FieldsValidationMessage</div>
                  }                   
              </div>
            </div>
          </div>       
        </div>
        <div class="row mt-1">
          <div class="col-xl-12">
            <button class="btn btn-primary btn-sm w-100" title="Perform Named Entity Recognition (NER) from GenAI" @onclick="PerformGenAINER" disabled="@IsLoading"  ><i class="bi bi-file-earmark-text"></i>Perform NER</button>
          </div>          
        </div>
        

        
    
  </div>
  <div class="tab-pane fade @(activeIndex==1 ? "show active" : "") p-2" id="profile" role="tabpanel">    
    <GenAIAccuracyDisclaimerAlert></GenAIAccuracyDisclaimerAlert>

    <ul class="list-group">
      @foreach(FieldToExtract oFieldToExtract in AnswersCol)
      {
      <li class="list-group-item list-group-item-action flex-column align-items-start">
        <div class="d-flex w-100 justify-content-between">
          <h5 class="mb-1">@oFieldToExtract.FieldValue</h5>
        </div>
        <p class="mb-1">@oFieldToExtract.Answer</p>
      </li>        
      }
    </ul>   

  </div> 
</div>






@code{

    private int activeIndex = 0;
    private void SetActiveTab(int intIndex)
    {
      activeIndex = intIndex;
    }

    public bool IsLoading;

    private IEnumerable<ModelData>  oModelDataCol = Enumerable.Empty<ModelData>();
    IEnumerable<ModelData> ModelDataCol {
      get
      {
        return oModelDataCol;
      } 
      set{
        oModelDataCol = value;
        StateContainer.ModelDataCol = oModelDataCol;
      }
    } 

    List<FieldToExtract> FieldToExtractCol {get; set;} = new List<FieldToExtract>(){new FieldToExtract()};
    
    List<FieldToExtract> AnswersCol {get; set;} = new List<FieldToExtract>(){};

    public string TextToBeAnalyzed{get; set;} = string.Empty;

    private string mstrSelectedModelKey = string.Empty; 
    public string SelectedModelKey {
      get
      {
        return mstrSelectedModelKey;
      }
      set
      {
        mstrSelectedModelKey = value;
        StateContainer.SelectedGenAIModelKey = mstrSelectedModelKey;
      }
    }

    public string GoogleGenAIAPIKey{get; set;}= string.Empty;

    public string KeyValidationMessage{get; set;} = string.Empty;

    public string AIModelValidationMessage {get ;set;} = string.Empty;

    public string TextToBeAnalyzedValidationMessage{get ;set;} = string.Empty;

    public string FieldsValidationMessage{get; set;} = string.Empty;

    protected override void OnInitialized()
    {
        GoogleGenAIAPIKey = StateContainer.GoogleGenAIAPIKey;
        ModelDataCol = StateContainer.ModelDataCol;
        SelectedModelKey = StateContainer.SelectedGenAIModelKey;
    }

    private void AddField()
    {
        FieldToExtractCol.Add(new FieldToExtract());        
    }



    private void OnFieldTextEntered(FieldToExtract oField)
    {
       FieldToExtract? oLastField = FieldToExtractCol.LastOrDefault();
       if(oLastField is null)
       {
        return;
       }
       if (oLastField == oField)
       {
          AddField();
       }
    }

    private void OnFieldDelete(FieldToExtract oField)
    {
        FieldToExtractCol.Remove(oField);
    }

    private async Task PerformGenAINER() 
    {
        KeyValidationMessage = string.Empty;
        if(string.IsNullOrWhiteSpace(GoogleGenAIAPIKey))
        {
            KeyValidationMessage = "Google API key is required";
            return;
        }

        AIModelValidationMessage = string.Empty;
        if(string.IsNullOrEmpty(SelectedModelKey))
        {
            AIModelValidationMessage = "AI model is required";
            return;
        }

        TextToBeAnalyzedValidationMessage = string.Empty;
        if(string.IsNullOrEmpty(TextToBeAnalyzed))
        {
            TextToBeAnalyzedValidationMessage = "Text to be analyzed is required";
            return;
        }

        FieldsValidationMessage = string.Empty;
        if(FieldToExtractCol is null || !FieldToExtractCol.Any( p=> !string.IsNullOrEmpty(p.FieldValue)))
        {
            FieldsValidationMessage = "Specify information for at least one field";
            return;
        } 

        IsLoading = true; 
        APIManager.APIRes oRes =  await APIManager.GenAI_PerformGenAISingleNER(strGoogleGenAIAPIKey:GoogleGenAIAPIKey, 
                                                                        strModelKey:SelectedModelKey, 
                                                                        strTextToCheck:TextToBeAnalyzed, 
                                                                        oNerFields:FieldToExtractCol.Where(p=>!string.IsNullOrEmpty(p.FieldValue)).Select(p => p.FieldValue).Distinct().ToList()) ;
       
        if(!oRes.Success_IND)
        {
          KeyValidationMessage = oRes.ErrorMessage;
          IsLoading = true; 
          return;
        }  

        string strAPICallResult = oRes.ResponseContent;       


        //parse the results
        List<FieldToExtract> oAnswersCol = new ();
        if(!string.IsNullOrWhiteSpace(strAPICallResult))
        {
          System.Text.Json.JsonDocument oDoc = System.Text.Json.JsonDocument.Parse(strAPICallResult);
          foreach(System.Text.Json.JsonProperty property  in oDoc.RootElement.EnumerateObject())
          {
            oAnswersCol.Add(new FieldToExtract(){
              FieldValue = property.Name, 
              Answer = property.Value.ToString()
            });
          }
        }      
        AnswersCol = oAnswersCol;    

        SetActiveTab(1);
        IsLoading = false; 
    }

    private async Task ValidateModels()
    { 

        KeyValidationMessage = string.Empty;
        if(string.IsNullOrWhiteSpace(GoogleGenAIAPIKey))
        {
          KeyValidationMessage = "Google API key is required";
          return;
        }

        IsLoading = true;

        APIManager.APIRes oRes = await APIManager.GenAI_GetGoogleStudioListOfModels(strGoogleGenAIAPIKey:GoogleGenAIAPIKey);

         if(!oRes.Success_IND)
        {
          KeyValidationMessage = oRes.ErrorMessage;
          IsLoading = true; 
          return;
        }          
       
       //parse the response here
       try
       {        
            ModelDataCol = System.Text.Json.JsonSerializer.Deserialize<List<ModelData>>(oRes.ResponseContent)!;
            if(String.IsNullOrWhiteSpace(SelectedModelKey))
            {
                SelectedModelKey = "models/gemini-2.5-flash";
                
            }
       }
       catch(Exception)
       {
         KeyValidationMessage = "Unable to understand the response from API key validation service.";
         IsLoading = false;
         return;
       }   

       IsLoading = false;
    }    
}
